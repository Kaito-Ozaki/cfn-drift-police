// Code generated by MockGen. DO NOT EDIT.
// Source: src/application/client/sqs/sqs-client.go

// Package mock_sqscli is a generated GoMock package.
package mock_sqscli

import (
	sqsdto "cfn-drift-police/src/application/dto/sqs"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSqsClient is a mock of SqsClient interface.
type MockSqsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSqsClientMockRecorder
}

// MockSqsClientMockRecorder is the mock recorder for MockSqsClient.
type MockSqsClientMockRecorder struct {
	mock *MockSqsClient
}

// NewMockSqsClient creates a new mock instance.
func NewMockSqsClient(ctrl *gomock.Controller) *MockSqsClient {
	mock := &MockSqsClient{ctrl: ctrl}
	mock.recorder = &MockSqsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqsClient) EXPECT() *MockSqsClientMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockSqsClient) DeleteMessage(in sqsdto.DeleteMessageInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockSqsClientMockRecorder) DeleteMessage(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockSqsClient)(nil).DeleteMessage), in)
}

// ReceiveMessage mocks base method.
func (m *MockSqsClient) ReceiveMessage(in sqsdto.ReceiveMessageInput) (*sqsdto.ReceiveMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveMessage", in)
	ret0, _ := ret[0].(*sqsdto.ReceiveMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveMessage indicates an expected call of ReceiveMessage.
func (mr *MockSqsClientMockRecorder) ReceiveMessage(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMessage", reflect.TypeOf((*MockSqsClient)(nil).ReceiveMessage), in)
}

// SendMessage mocks base method.
func (m *MockSqsClient) SendMessage(in sqsdto.SendMessageInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockSqsClientMockRecorder) SendMessage(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockSqsClient)(nil).SendMessage), in)
}
